<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.gurzumihail</groupId>
	<artifactId>library</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>library</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>8</maven.compiler.target>
		<junit.version>4.13.2</junit.version>
		<assertj.swing.version>3.17.1</assertj.swing.version>
		<mockito.version>4.11.0</mockito.version>
		<mongodb.version>3.12.11</mongodb.version>
		<logback.version>1.3.5</logback.version>
		<codehaus.mojo.version>3.3.0</codehaus.mojo.version>
		<testcontainers.version>1.17.6</testcontainers.version>
		<failsafe.version>3.0.0-M8</failsafe.version>
		<mysql.connector.version>8.0.32</mysql.connector.version>
		<log4j.version>2.19.0</log4j.version>
		<picocli.version>4.7.1</picocli.version>
		<docker.maven.version>0.41.0</docker.maven.version>
		<docker.image.mongodb>candis/mongo-replica-set:0.0.2</docker.image.mongodb>
		<docker.image.mysql>mysql/mysql-server:8.0.32</docker.image.mysql>
		<!-- SONARCUBE-->
		<sonar.coverage.exclusions>
			**/library/App.java,
			**/model/*,
			**/library/view/swing/*,
			**/library/app/swing/mongo/*,
			**/library/app/swing/mysql/*,
		</sonar.coverage.exclusions>

		<sonar.issue.ignore.multicriteria>e11, e12, e13, e14</sonar.issue.ignore.multicriteria>
		<!-- Disable rule for "Tests should include assertions":
      SonarQube is not aware of AssertJ Swing -->
		<sonar.issue.ignore.multicriteria.e11.ruleKey>
        	java:S2699
  		</sonar.issue.ignore.multicriteria.e11.ruleKey>
		<sonar.issue.ignore.multicriteria.e11.resourceKey>
        	**/LibraryViewSwingTest.java
    	</sonar.issue.ignore.multicriteria.e11.resourceKey>
		
		<!-- Disable rule for "Rename this local variable to match the regular expression '^[a-z][a-zA-Z0-9]*$'."-->
		<sonar.issue.ignore.multicriteria.e12.ruleKey>
        	java:S117
  		</sonar.issue.ignore.multicriteria.e12.ruleKey>
		<sonar.issue.ignore.multicriteria.e12.resourceKey>
        	**/LibraryViewSwing.java
    	</sonar.issue.ignore.multicriteria.e12.resourceKey>

		<!-- Disable rule for "String literals should not be duplicated " -->
		<sonar.issue.ignore.multicriteria.e13.ruleKey>
        	java:S1192
  		</sonar.issue.ignore.multicriteria.e13.ruleKey>
		<sonar.issue.ignore.multicriteria.e13.resourceKey>
        	**/UserRepositoryMongo.java
    	</sonar.issue.ignore.multicriteria.e13.resourceKey>

		<!-- Disable rule for "Test classes should comply with a naming convention " -->
		<sonar.issue.ignore.multicriteria.e14.ruleKey>
        	java:S3577
  		</sonar.issue.ignore.multicriteria.e14.ruleKey>
		<sonar.issue.ignore.multicriteria.e14.resourceKey>
        	**/LibrarySwingMongoAppE2E.java
    	</sonar.issue.ignore.multicriteria.e14.resourceKey>
		
	</properties>


	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-bom</artifactId>
				<version>${log4j.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>${assertj.swing.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongodb.version}</version>
		</dependency>
		<dependency>
			<!-- required to see Mongo Java Driver logs -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mongodb</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.connector.version}</version>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mysql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- version taken from the imported BOM -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- version taken from the imported BOM -->
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>${picocli.version}</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-surefire-report-plugin</artifactId>
					<version>2.22.2</version>
				</plugin>
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.9.1</version>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.8.8</version>
					<configuration>
						<excludes>
							<exclude>**/model/*.*</exclude>
							<exclude>**/library/App.*</exclude>
							<exclude>**/library/view/swing/*.*</exclude>
							<exclude>**/library/app/swing/mongo/*.*</exclude>
							<exclude>**/library/app/swing/mysql/*.*</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<goals>
								<!-- binds by default to the phase "initialize" -->
								<goal>prepare-agent</goal>
								<!-- binds by default to the phase "verify" -->
								<goal>report</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>4.3.0</version>
					<dependencies>
						<!-- this is required when using JDK 9 or higher 
						since javax.xml.bind has been removed from the JDK -->
						<dependency>
							<groupId>javax.xml.bind</groupId>
							<artifactId>jaxb-api</artifactId>
							<version>2.3.1</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.pitest</groupId>
					<artifactId>pitest-maven</artifactId>
					<version>1.10.3</version>
					<executions>
						<execution>
							<phase>test</phase>
							<goals>
								<goal>mutationCoverage</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<excludedClasses>
							<param>com.gurzumihail.library.model.*</param>
							<param>com.gurzumihail.library.App.*</param>
							<param>com.gurzumihail.library.view.swing.*</param>
							<param>com.gurzumihail.library.app.swing.mongo.*</param>
							<param>com.gurzumihail.library.app.swing.mysql.*</param>
						</excludedClasses>
						<excludedTestClasses>
							<param>com.gurzumihail.library.view.swing.*</param>
							<param>com.gurzumihail.library.app.swing.mongo.*</param>
							<param>com.gurzumihail.library.app.swing.mysql.*</param>
						</excludedTestClasses>
						<mutators>
							<mutator>DEFAULTS</mutator>
						</mutators>
						<mutationThreshold>100</mutationThreshold>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>3.9.1.2184</version>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${codehaus.mojo.version}</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
								<source>src/e2e/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-test-resource</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>src/it/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${failsafe.version}</version>
				<executions>
					<execution>
						<id>default-IT</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
					<execution>
						<id>e2e-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
							<includes>
								<include>**/*E2E.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker.maven.version}</version>
				<configuration>
					<images>
						<image>
							<name>${docker.image.mongodb}</name>
							<run>
								<ports>
									<port>27017:27017</port>
								</ports>
							</run>
						</image>
						<image>
							<name>${docker.image.mysql}</name>
							<run>
								<ports>
									<port>3306:3306</port>
								</ports>
								<env>
									<MYSQL_DATABASE>library</MYSQL_DATABASE>	
									<MYSQL_USER>root</MYSQL_USER>								
									<MYSQL_ROOT_PASSWORD>password</MYSQL_ROOT_PASSWORD>
								 	<MYSQL_ROOT_HOST>%</MYSQL_ROOT_HOST>
								</env>
								<volumes>
									<bind>
										<volume>src/it/resources/database:/docker-entrypoint-initdb.d</volume>
									</bind>
								</volumes>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker-start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>docker-stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>build-mongo-app</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<finalName>MONGO_app.jar</finalName>
							<archive>
								<manifest>
									<mainClass>com.gurzumihail.library.app.swing.mongo.LibrarySwingMongoApp</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
					<execution>
						<id>build-mysql-app</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<finalName>MYSQL_app.jar</finalName>
							<archive>
								<manifest>
									<mainClass>com.gurzumihail.library.app.swing.mysql.LibrarySwingMySqlApp</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<profiles>
		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<plugin>
						<!-- configured in pluginManagement -->
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>coveralls</id>
			<build>
				<plugins>
					<plugin>
						<!-- configured in pluginManagement -->
						<!-- JaCoCo report is required by coveralls-maven-plugin -->
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
					<plugin>
						<!-- configured in pluginManagement -->
						<groupId>org.eluder.coveralls</groupId>
						<artifactId>coveralls-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>verify</phase>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>pit</id>
			<build>
				<plugins>
					<plugin>
						<!-- configured in pluginManagement-->
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
